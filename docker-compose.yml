version: "3.8"

services:
  web:
    build: .
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py loaddata check_service/fixtures/printer_data.json check_service/fixtures/check_data.json &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app/
      - media:/app/media
    ports:
      - "8000:8000"
    restart: always
    env_file:
      - .env
    depends_on:
      - db

  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  redis:
    image: "redis:7-alpine"
    restart: always

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: "celery -A check_generation_service worker -l INFO"
    volumes:
      - media:/app/media
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - web
      - redis
      - wkhtmltopdf

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py wait_for_db &&
             celery -A check_generation_service beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    volumes:
      - media:/app/media
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - web
      - redis
      - wkhtmltopdf

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    command: "celery -A check_generation_service flower --address=0.0.0.0"
    depends_on:
      - celery
    env_file:
      - .env

  wkhtmltopdf:
    image: "openlabs/docker-wkhtmltopdf"
    restart: on-failure

volumes:
  postgres_data:
  media:
